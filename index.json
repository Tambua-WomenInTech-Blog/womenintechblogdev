[{"categories":null,"contents":"I can almost bet on it that you\u0026rsquo;ve fallen in love with JavaScript and want to dive deeper into learning some of it\u0026rsquo;s libaries and frameworks. Well if that\u0026rsquo;s the case then this is the place to be. This guide will walk you through everything you need to know to get started with React.\nWe\u0026rsquo;ll get set up, explain the how\u0026rsquo;s and why\u0026rsquo;s behind the basic concepts and build a small project that displays data from an API. I am assuming that we have a little knowledge of JavaScript core concepts such as Asychronous programing, Promises, Hoisting, ES6 Syntax etc. If not visit here JavaScript Concepts That Every Developer Must Know  to learn more.\nGrab a drink, buckle up and let\u0026rsquo;s get started!\nSections  Prerequisites Basic JavaScript Basic HTML Development Environment Creating a React App Exploring Create React App Our First Component JSX How a Component Gets Rendered Let\u0026rsquo;s Display Data Fetched From an API  Prerequisites You don\u0026rsquo;t need to have any prior knowldge of React before reading this article, you however need to be familiar with a few things in order to get the most out of this guide.\nBasic JavaScript React is a JS library so it makes sense to know JavaSript before learning React right? Worry less, you don\u0026rsquo;t need to know Javscript extensively to learn React Js, just the basics.Here\u0026rsquo;s a list of some of the concepts you should be familiar with before learning React.\n Variables, functions and Data Types Asychronous Programming Arrays and Objects ES6 features and syntax DOM Manupulation  Basic HTML In React we use JSX, which we will dive into later. But for now have a good grasp of HTML preferably HTML5.\n How to structure HTML elements. HTML attributes such as class, id, onclick, href etc  Development Environment The first thing we do before interacting with any programming language is to set up it\u0026rsquo;s developemt environment, React JS is no different. If you have Node JS and Visual Studio Code (or your preffered IDE) set up you can skip this section.\nNode JS Do I really need node to set up a React app? The answer is no. If you are a web developer that can handle HTML/CSS and JavaSCript you can try React without Node JS or any other complext tool to manage it. That\u0026rsquo;s your assignment.\nIn our case we need Node js. To download it visit this link and choose one that fit\u0026rsquo;s your machine.\nWhen the installation is complete, open your terminal and type\n node -v This should show you the version of node that you have installed. The output should look something like: v16.7.0 Hurrraaaaaayy!!! Congratulations! You have completed the first step to getting started with React.\n Visual Studio Code VSC is a popular Open Source IDE for frontend development. There\u0026rsquo;s a bunch of IDEs that you can try depending on your preference. For now we will run with Visual Studio Code.\nClick this link to download the version that suits your platform. That\u0026rsquo;s enough development set up for now.\nCreating a React App The next step is now creating a React app. Thank God for the folks at Facebook who made it easy for us to do that. All we to do is run this command in our terminal.\nnpx create-react-app my-app --  This creates a React project called my-app.\n Output on the terminal   Realize we\u0026rsquo;ve been directed on how to start our app\n Run these commands on your terminal, this will start a development server and open a web browser for you.\n Web browser   You;ve just set up your first React app, if you want to know more about what happens in the background visit this link Create React App\nExploring Create React App  Here\u0026#39;s the file structure   After running npx create-react-app yourApp, you will find your app root has three folders, node_modules/, public/, src/ and three files .gitignore, package.json, README.md and yarn.lock.\nRunning create-react-app Let\u0026rsquo;s break down what you just did. The first line in the output is from npx . There are two things npx can do when you give it the command. It first looks in your local machine for the package to run it. If it doesn\u0026rsquo;t find one, it starts looking for npm\u0026rsquo;s package list. The first message in the output is just letting you know that it handled getting it.\nNext inside create-react-app, your command runs through a series of checks. It finds information about your system, looks for any flags attached and whether you specified a folder to output. Then the actual createApp function runs. This checks if the directory you choose is a safe one. It does this by looking for log files, if it fails any of this checks you will receive an error message.\nNext it begins to form a package.json file with the default values name: yourAppName, version: 0.1.0 and private: true. This is written to the directory you specified. Here it determines if it should use yarn or npm based on what you have in your machine. A series of checks are run on the version of npm/yarn, node version to select the correct version of react-scripts to use.\nThe next function is called run() . This continues the installation. Right now the only output you\u0026rsquo;ve seen so far is is the npx line \u0026ldquo;Creating a react app in \u0026rdquo;. The dependency list is created. By default this icludes react, react-dom and the version of react-scripts either from the internet if you are online or the local cache if you are not.\nThis is where you get the line installing react, react-dom and react scripts. The first thing it does is check if there\u0026rsquo;s package.json file and yarn.lock. It loads package.json file into a variable called appPackage in JSON format. It checks if TypeScript is a dependency after it does this. Next it begins adding to the JSON.\nFirst is the scripts, this will probably be familiar as start, build, eject and test. These are located in init.js file that we are currently going through. Next is the eslintConfig and defaultBrowsers. These are by default `\u0026gt;0.2%\u0026rsquo;,\u0026rsquo;not dead\u0026rsquo;, \u0026rsquo;not ie \u0026lt;= 11\u0026rsquo;,\u0026rsquo;not op_mini all\u0026rsquo;. Basically this means target all browsers that are higher than .2% market share, in active use, not below IE 11 or Opera Mini.This is a seperate package located in package.json. You can find it  Here . The package.json file is written out and will not be changed again. At this point there\u0026rsquo;s no output yet, a README.md file is checked and if it exists it is renamed. The files specified in the template folder are then copied to a working directory. This is the public, README.me, src and gitignore. gitignore is copied without the . infront then renamed, this is to prevent an npm bug. After a check to see if React is installed, it moves to check if the repository has been initialized with git. These runs git init, and adds the first commit. This is where the line Initialized a git repository comes from. The last thing init.js does before ending the process is print the success message and instructions. These introduce you to basic react scripts commands and suggest you cd into your app directory to run your application.\nIndex.html This is the entry file, the first thing that the web browser loads when a user navigates to your app. If you look at the file, it\u0026rsquo;s just a normal HTML file that you\u0026rsquo;re hopefully familiar with. If you look at the body, it\u0026rsquo;s empty. React dynamically convert our React code into HTML and load it here, in the div with id \u0026ldquo;root\u0026rdquo;. With that out of the way let\u0026rsquo;s get to the juicy part.\nOur First Component Open up our App.js component, this is the main component in our application. It is the first component to be rendered, the icing to our cake. The first thing we are going to do with our icing is remove all the code so that we build our component from scratch so that we better understand what\u0026rsquo;s going on. Now that we have a nice and clean slate,we will start by importing react\nimport react from 'react';\nNext we declare a function, we will use ES6 arrow function here. That\u0026rsquo;s more or less what a component is\u0026hellip;A function with some logic and markup ( In this case JSX ). We are also going to export this function so we can use it elsewhere.\n const App = () =\u0026gt;{  }  export default App; Within this code we write a return() statement, that is what get\u0026rsquo;s returned from this component, and contains our markup that get\u0026rsquo;s rendered inform of HTMl. Finally let\u0026rsquo;s add a div with an h1 title tag. Our finished component looks like this:\n const App = () =\u0026gt;{  return(  \u0026lt;div\u0026gt;  \u0026lt;h1\u0026gt;Our First React App\u0026lt;/h1\u0026gt;  \u0026lt;h2\u0026gt;This is our first react app, isn\u0026#39;t it amazing!!!!\u0026lt;/h2\u0026gt;  \u0026lt;/div\u0026gt;  ) } Now you are probably thinking, Whoah!! HTML in a function? Even though it looks like HTML, it\u0026rsquo;s something called JSX( JavaScript XML ).It allows us to mix JavaScript and HTML. This might seem a littel peculiar cause we started learning front-end development by seperating HTML and JavaScript( and even CSS ). That is where libaries come in, to keep things together and to make writing code easier.Keeping everything together in the same component makes it easier to maintain and reuse the code. Let\u0026rsquo;s see that in action. Run this command in your terminal npm run start This should open the browser and you should be able to see your application running. Voila!! You just created your first component.\nJSX Let\u0026rsquo;s dive deeper into JSX, you probably have some questions lingering.\n return(  \u0026lt;div\u0026gt;  \u0026lt;h1\u0026gt;Our First React App\u0026lt;/h1\u0026gt;  \u0026lt;h2\u0026gt;This is our first react app, isn\u0026#39;t it amazing!!!!\u0026lt;/h2\u0026gt;  \u0026lt;/div\u0026gt;  ); This looks like HTML and it\u0026rsquo;s not. It\u0026rsquo;s JSX! Evn though it looks like normal HTML but it\u0026rsquo;s not, React is creating the element tree using the following syntax: React.createElement(component,props,...children)\n component: The HTML element you wish to create i.e div, h1 props: Any props you wish to pass to the component children: An array of HTML Elements nested within a component. So the same component we just created can be written as:   const App = ()=\u0026gt;{  return(  React.createElement(\u0026#39;div\u0026#39;, null, React.createElement(\u0026#39;h1\u0026#39;,null, \u0026#34;Hello World\u0026#34;),   React.createElement(\u0026#39;div\u0026#39;, null, React.createElement(\u0026#39;h1\u0026#39;,null, \u0026#34;This is our first react app, isn\u0026#39;t it amazing!!!!\u0026#34;))  );  } This is a whole lot to type right? It looks messy. If you trace through it you will realize we are creating a div which has no props passed to it and has other elements created inside it which are h1 and h2. If you\u0026rsquo;ve interacted with JavaScript a lot you\u0026rsquo;ll realize that it a lot similar to document.createElement after all this is a JavaScript library. This is the beauty of JSX, it allows you to write JavaScript and HTML without going through the hustle of React.createElement(). React developers almost exclusively use JSX, this section was important to understand what happens under the hood.\nMaking things dynamic Why use JSX when you can just write HTML and get away with it? Well if we remember what JSX stands for( JavaScript XML ). This means we can use JavaScript to make things dynamic. Our previous example looks like so:\n const App = () =\u0026gt;{  return(  \u0026lt;div\u0026gt;  \u0026lt;h1\u0026gt;Our First React App\u0026lt;/h1\u0026gt;  \u0026lt;h2\u0026gt;This is our first react app, isn\u0026#39;t it amazing!!!!\u0026lt;/h2\u0026gt;  \u0026lt;/div\u0026gt;  )  } Now let\u0026rsquo;s make it dynamic. Create a variable message to hold our message. const message = 'This is our first react app, isn't it amazing!!!!'; Now to add JavaScript to use this, we use curlybraces {}.\n const App = ()=\u0026gt;{  const message = \u0026#39;This is our first react app, isn\u0026#39;t it amazing!!!!\u0026#39;;  return(  \u0026lt;h1\u0026gt;Our First React App\u0026lt;/h1\u0026gt;  \u0026lt;h2\u0026gt;{ message }\u0026lt;/h2\u0026gt;  )  } If you run this in your terminal you will see the output. Now go ahead and change the message and see magic! We use curly braces to tell the compiler \u0026ldquo;execute this code in JavaScript\u0026rdquo;. If we didn\u0026rsquo;t have the curly braces the message wouldn\u0026rsquo;t be executed as JavaScript, and instead the text \u0026lsquo;message\u0026rsquo; would be displayed on your browser.\nHow a component gets rendered. Hopefully, I have cleared all the questions you have about JSX and creating components plus making them dynamic. I know you still asking yourself how these components get rendered right? This section will clear that up. Let\u0026rsquo;s take a look at our file structure, notice index.html , this is always considered an entry file, to most developers if not all. You can change the entry point if you wish. For now we will leave it as is. Focus on this line of code\n ReactDOM.render(\u0026lt;App /\u0026gt;, document.getElementById(\u0026#34;root\u0026#34;)); Notice we have document.getElementById(\u0026quot;root\u0026quot;); finally some normal looking JavaScript. This gets the root element from the DOM using plain JavaScript and renders our App component within it. Our App component is imported like so: import App from './App'; Remember we exported App from our App component. This lets other files or components use App component. The root element comes from index.html file from our folder called public/ . As mentioned earlier, index.html is the file that gets rendered when the application loads. Within it we have a div with an id root which is empty and where our React components get rendered. Let\u0026rsquo;s open our dev tools and have a look.\n Output in the console   Let\u0026rsquo;s display data fetched from an API Wuuuuh wuuuh!! This is the most interesting part, in JavaScript there\u0026rsquo;ll always be data to be fetched and dislplayed because you constantly have to communicate with the backend. We will not dive in too deep. We will use fetch API. Fetch API uses Promise to deliver more flexible features to make requests to servers from web browsers. In addition it is much simpler and cleaner compared to XMLHttpRequests. The fetch() is available in global scope which instructs the web browsers to make requests.\nSending a request The fetch() only requires one parameter which is the url for the resources you want to fetch. let response = fetch(url); The fetch() returns a Promise so you can use then and catch to handle it.\n fetch(url)  .then(response =\u0026gt; {  //Handle response  })  .catch(error =\u0026gt;{  //Handle error  }); When the response completes the response is available. At this time, the Promise will resolve into Response object. The Response object is the API wrapper for the fetched url resources. The Response object has a number of useful properties and methods to inspect the response. Let\u0026rsquo;s get right into the juice. Visit this  link to get some free APIs. Choose any that you please. In our case we will use Cat facts APIs. I love cats!!\n import \u0026#34;./App.css\u0026#34;;  import React from \u0026#34;react\u0026#34;;  const App = () =\u0026gt; {  let catFact = {};  let fact = \u0026#39;\u0026#39;;  const fetchAPI = () =\u0026gt; {  fetch(\u0026#34;https://catfact.ninja/fact\u0026#34;)  .then((response) =\u0026gt; {  return response.json();  })  .then(data =\u0026gt;{  catFact = data;  fact = catFact.fact;  console.log( catFact );  console.log(fact);  })  .catch((err) =\u0026gt; console.log(err))  };  fetchAPI();  return (  \u0026lt;div className=\u0026#34;App\u0026#34;\u0026gt;  \u0026lt;h1\u0026gt;First React App!\u0026lt;/h1\u0026gt;  \u0026lt;/div\u0026gt;  );  };  export default App; To your previous code, add the above snippet and open your console to view your data. Now as an assignment work on displaying the data on your browser. There are better libararies used to fetch APIs such as axios.Here\u0026rsquo;s a link to a comprehensive view of axios React has a good documentation showing a step to step guide. Check it out here. See you on the next blog when we talk about props. Happy coding!!!!\n","date":"04 Nov, 2021","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cpicture\u003e\n  \u003csource srcset=\"/womenintechblogdev/images/hero/valary-uhuru/getting-started-with-react/image_hu7fff1f7749c5459102d94a5be6e9afaa_98375_545x0_resize_q95_h2_box_3.webp\" media=\"(max-width: 575px)\"\u003e\n  \u003csource srcset=\"/womenintechblogdev/images/hero/valary-uhuru/getting-started-with-react/image_hu7fff1f7749c5459102d94a5be6e9afaa_98375_600x0_resize_q95_h2_box_3.webp\" media=\"(max-width: 767px)\"\u003e\n  \u003csource srcset=\"/womenintechblogdev/images/hero/valary-uhuru/getting-started-with-react/image_hu7fff1f7749c5459102d94a5be6e9afaa_98375_700x0_resize_q95_h2_box_3.webp\" media=\"(max-width: 991px)\"\u003e\n  \u003csource srcset=\"/womenintechblogdev/images/hero/valary-uhuru/getting-started-with-react/image_hu7fff1f7749c5459102d94a5be6e9afaa_98375_1110x0_resize_q95_h2_box_3.webp\"\u003e\n  \u003cimg loading=\"lazy\" decoding=\"async\" class=\"w-100 img-fluid rounded\" src=\"/womenintechblogdev/images/hero/valary-uhuru/getting-started-with-react/image_hu7fff1f7749c5459102d94a5be6e9afaa_98375_1110x0_resize_box_3.png\" alt=\"\" width=\"1348\" height=\"891\"\u003e\n\u003c/picture\u003e\n \n \n \n\n","permalink":"/womenintechblogdev/blog/getting-started-with-react/","tags":null,"title":"Getting Started With React"},{"categories":null,"contents":"Clone If you are working on this project for the first time follow the below steps.\nMake a fork of the project from https://github.com/Tambua-WomenInTech-Blog/womenintechblog/fork/. Next, clone the project into an empty directory.\ngit clone --recurse-submodules -j8 https://github.com/\u0026lt;YOUR-USERNAME\u0026gt;/womenintechblog \u0026amp;\u0026amp; cd womenintechblog # git clone --recurse-submodules -j8 https://github.com/nerd/womenintechblog \u0026amp;\u0026amp; cd womenintechblog Branch Switch to a branch that is named in the following manner\ngit checkout -b blog/\u0026lt;your-git-username\u0026gt;/\u0026lt;blog-name\u0026gt; # example git checkout -b blog/nerd/rust  Before you start Follow the README guide found at the root of the project to set your development environment.\nCreate Blog To add a new blog, run the command below inside your terminal\nhugo new --kind blog blog/your-blog-title Each blog will be inside the directory structure as shown below. Your new blog will reside inside a folder named blog-title.\n/ |-- /.github |-- /archetypes |-- /assests |-- /content  |-- /author  |-- /blog  |--/blog-title  |--/blog-title  |--/images  |-- index.md |-- /layouts |-- /static |-- /themes |-- config.toml |-- README.md Inside this folder, add your blog images inside the images folder.The index.md file where your blog content goes.Ensure to add your blog hero image inside assets/images/hero/firstname-lastname/blog-title folder.\n Adding hero inside the assets folder and not inside your blog post folder is due to how this particular Hugo theme processes static content data, if this is not followed, the hero image does not render on the home page.\n Blog frontmatter Your blog should have the following contents in its frontmatter.\n--- title: Your Blog Title date: Auto-generated DO NOT EDIT image: ./images/hero/hero.jpg summary: A short summary about your blog. author: \u0026#34;Your Name\u0026#34; draft: true --- Author Info Create new Author To create a new author run the follwowing command in your terminal of choice\nhugo new author/firstname-lastname Each author will have their info inside the content/author/\u0026lt;firstname-lastname\u0026gt;.md file and their avatars will have to be added inside the static/images/avatars/\u0026lt;firstname-lastname\u0026gt; folder, the image size should be cropped to 512 pixels x 512 pixels\n/ |-- /.github |-- /archetypes |-- /assets |-- /content  |--/author/  |--/firstname-lastname.md  |--/blog |-- /layouts |-- /static  |--/images/avatars  |--/firstname-lastname/  |--/firstname-lastname.png |-- /themes |-- config.toml |-- README.md Inside content/authors/\u0026lt;firstname-lastname\u0026gt;/_.index.md add the contents as follows.\n--- title: FirstName LastName image: /images/avatars/\u0026lt;firstname-lastname\u0026gt;/\u0026lt;first-name-lastname\u0026gt;.png social:  - icon: \u0026#34;la-github\u0026#34;  link: https://github.com --- Something very cool about yourself. Feel free to write a longer bio. You can also add mopre social links, get icons from line awesome. For example\n//.. social: - icon: \u0026#34;la-discord\u0026#34; link: https://discord.gg/test Ensure to have added your avatar, and your name must match what you have in your blog post.\nThe Admin can make you a featured author by adding the following lines under your bio\nPreview To preview your content, run the below command and open http://localhost:1313/.\nhugo server -D Content Tips and Tricks Images within the blog Use hugo shortcode for HTML5 Figure tag\n Test Image Title   Publishing When ready to publish set draft to false in you blog.\ndraft: false And remove all .gitkeep files from your folders.\nPublish your changes, stage, commit and push the repo upstream.\ngit add . git commit -m \u0026#34;a message about your changes, example added rust beginner blog\u0026#34; git push origin blog/nerd/rust Send a Pull Request From Github, switch to your branch and send a pull request and await your PR to be merged.\nMaking changes To make changes to your blog or Bio follow the below steps:\n Clone the repo from https://github.com/Tambua-WomenInTech-Blog/womenintechblog.git. Create a branch in the form edit/\u0026lt;username\u0026gt;/\u0026lt;blog-name\u0026gt;. Make your changes and commit. Push the changes upstream and send a pull request  git clone https://github.com/Tambua-WomenInTech-Blog/womenintechblog.git git checkout -b edit/nerd/rust # make changes git add . \u0026amp;\u0026amp; git commit -m \u0026#34;state chages made\u0026#34; git push origin edit/nerd/rust ","date":"17 Jan, 2021","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cpicture\u003e\n  \u003csource srcset=\"/womenintechblogdev/images/hero/arthur-ken/writing-a-blog/hero_hu38baf4536e75418d7bf345237d23cd93_340823_545x0_resize_q95_h2_box.webp\" media=\"(max-width: 575px)\"\u003e\n  \u003csource srcset=\"/womenintechblogdev/images/hero/arthur-ken/writing-a-blog/hero_hu38baf4536e75418d7bf345237d23cd93_340823_600x0_resize_q95_h2_box.webp\" media=\"(max-width: 767px)\"\u003e\n  \u003csource srcset=\"/womenintechblogdev/images/hero/arthur-ken/writing-a-blog/hero_hu38baf4536e75418d7bf345237d23cd93_340823_700x0_resize_q95_h2_box.webp\" media=\"(max-width: 991px)\"\u003e\n  \u003csource srcset=\"/womenintechblogdev/images/hero/arthur-ken/writing-a-blog/hero_hu38baf4536e75418d7bf345237d23cd93_340823_1110x0_resize_q95_h2_box.webp\"\u003e\n  \u003cimg loading=\"lazy\" decoding=\"async\" class=\"w-100 img-fluid rounded\" src=\"/womenintechblogdev/images/hero/arthur-ken/writing-a-blog/hero_hu38baf4536e75418d7bf345237d23cd93_340823_1110x0_resize_q95_box.jpeg\" alt=\"\" width=\"1200\" height=\"740\"\u003e\n\u003c/picture\u003e\n \n \n \n\n","permalink":"/womenintechblogdev/blog/writing-a-blog/","tags":null,"title":"Writing a Blog"}]